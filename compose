#!/bin/bash
test -f config && . "./config"
set -e

IMAGE_ZOOKEEPER="jplock/zookeeper:3.4.13" # latest: 3.5.5
IMAGE_MESOS="mesosphere/mesos:1.6.2" # latest: 1.7.1
IMAGE_MARATHON="mesosphere/marathon:v1.8.244" # then v1.9.140, v1.10.26, v1.11.26

function mesos_prepare_env() {

	if [ "_$INTERFACE" = "_" ]; then echo "missing env: INTERFACE"; exit 1; fi
	if [ "_$MASTERS" = "_" ]; then echo "missing env: MASTERS"; exit 1; fi
	if [ "_$QUORUM" = "_" ]; then echo "missing env: QUORUM"; exit 1; fi

    mkdir -p work_dir log_dir

    # Docker supports the following restart policies:
    # - no
    #         Do not automatically restart the container when it exits. This is the default.
    # - on-failure[:max-retries]
    #         Restart only if the container exits with a non-zero exit status. Optionally, limit the number of restart retries the Docker daemon attempts.
    # - always
    #         Always restart the container regardless of the exit status. When you specify always, the Docker daemon will try to restart the container indefinitely. The container will also always start on daemon startup, regardless of the current state of the container.
    # - unless-stopped
    #         Always restart the container regardless of the exit status, but do not start it on daemon startup if the container has been put to a stopped state before.
    if [ "_$RESTART_POLICY" = "_" ]; then
        RESTART_POLICY="on-failure:10"
    fi

	# Create the list of zookeeper host:port configs
	for i in $MASTERS; do
		if [ "_${ZK}" != "_" ]; then
			ZK="${ZK},"
		fi
		ZK="${ZK}${i}:2181"
	done

	# Find the public IP for the selected network interface
	MESOS_IP=`ifconfig $INTERFACE | grep "inet addr" | awk -F: '{print $2}' | awk '{print $1}'`
	if [ "_$MESOS_IP" = "_" ]; then
		MESOS_IP=`ifconfig $INTERFACE | grep "inet " | awk '{print $2}'`
	fi

	if [ "_$MYID" = "_" ]; then
		MYID="`echo $MESOS_IP|cut -d. -f4`"
	fi

	if [ "_$MESOS_HOSTNAME" = "_" ]; then
		MESOS_HOSTNAME=$MESOS_IP
	fi

	# Build zookeeper urls for mesos and marathon
	MESOS_ZK="zk://$ZK/mesos"
	MARATHON_ZK="zk://$ZK/marathon"

	export INTERFACE
	export MASTERS
	export QUORUM
	export MESOS_HOSTNAME
	export MESOS_IP
	export MESOS_ZK
	export MARATHON_ZK
	export MYID
    export RESTART_POLICY

	echo "INTERFACE=$INTERFACE"
	echo "QUORUM=$QUORUM"
	echo "MASTERS=$MASTERS"
	echo "MESOS_HOSTNAME=$MESOS_HOSTNAME"
	echo "MESOS_IP=$MESOS_IP"
	echo "MESOS_ZK=$MESOS_ZK"
	echo "MARATHON_ZK=$MARATHON_ZK"
	echo "MYID=$MYID"

}

function mesos_slave() {

    mesos_prepare_env
    make_disk_resources

    # Quick fix for docker-client from Ubuntu 14.04 host to run.
    if test -e /usr/lib/x86_64-linux-gnu/libapparmor.so.1; then
        APPARMOR_VOLUME0="   - /usr/lib/x86_64-linux-gnu/libapparmor.so.1:/usr/lib/x86_64-linux-gnu/libapparmor.so.1"
    fi
    if test -e /usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0; then
        APPARMOR_VOLUME1="   - /usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0:/usr/lib/x86_64-linux-gnu/libapparmor.so.1.1.0"
    fi
    if test -e /usr/lib/x86_64-linux-gnu/libltdl.so.7; then
        LTDL_VOLUME0="   - /usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7"
    fi

	cat << EOF | envsubst > ip
MESOS_IP=$MESOS_IP
HAPROXY_HOST=$MESOS_IP
EOF
	cat << EOF | envsubst > docker-compose.yml
mesosslave:
  image: $IMAGE_MESOS
  command: >
    mesos-slave
    --containerizers=docker,mesos
    --executor_registration_timeout=5mins
    --work_dir=/work_dir
    --log_dir=/log_dir
    --resources=file:///resources.json
    --no-systemd_enable_support
  net: host
  pid: host
  volumes:
   - /mnt:/mnt
   - ./work_dir:/work_dir
   - ./log_dir:/log_dir
   - ./resources.json:/resources.json
   - ./ip:/ip
   - /var/run/docker.sock:/var/run/docker.sock
   - /usr/bin/docker:/usr/bin/docker
$APPARMOR_VOLUME0
$APPARMOR_VOLUME1
$LTDL_VOLUME0
  privileged: true
  ports:
   - "$MESOS_IP:5051:5051"
  environment:
   - "MESOS_HOSTNAME=$MESOS_HOSTNAME"
   - "MESOS_IP=$MESOS_IP"
   - "MESOS_MASTER=$MESOS_ZK"
  restart: "$RESTART_POLICY"
EOF
	echo "docker-compose.yml saved."
}

function mesos_master() {

    mesos_prepare_env

	cat << EOF | envsubst > docker-compose.yml
zookeeper:
  image: $IMAGE_ZOOKEEPER
  net: host
  volumes:
   - ./zookeeper/conf:/opt/zookeeper/conf
   - ./zookeeper/data:/tmp/zookeeper
  restart: "$RESTART_POLICY"

mesosmaster:
  image: $IMAGE_MESOS
  command: >
    mesos-master
    --registry=in_memory
    --work_dir=/work_dir
    --log_dir=/log_dir
  volumes:
    - ./work_dir:/work_dir
    - ./log_dir:/log_dir
  net: host
  environment:
   - "MESOS_HOSTNAME=$MESOS_HOSTNAME"
   - "MESOS_IP=$MESOS_IP"
   - "MESOS_ZK=$MESOS_ZK"
   - "MESOS_QUORUM=$QUORUM"
  restart: "$RESTART_POLICY"

marathon:
  image: $IMAGE_MARATHON
  net: host
  command: >
    --mesos_role marathon
  environment:
   - "MARATHON_MASTER=$MESOS_ZK"
   - "MARATHON_ZK=$MARATHON_ZK"
   - "MARATHON_HTTP_ADDRESS=$MESOS_HOSTNAME"
   - "MARATHON_HOSTNAME=$MESOS_HOSTNAME"
   - "MARATHON_TASK_LAUNCH_TIMEOUT=300000"
  restart: "$RESTART_POLICY"
EOF
	echo "docker-compose.yml saved."

	# Prepare zookeeper config and data
	mkdir -p zookeeper/conf
	mkdir -p zookeeper/data

	echo $MYID > zookeeper/data/myid

    # Retrieve some conf from zookeeper image (configuration.xsl, log4j.properties)
    # because it'll be inaccessible after we mount `conf` as a volume.
	docker run --rm -v $(pwd)/zookeeper/conf:/conf --entrypoint=cp $IMAGE_ZOOKEEPER conf/configuration.xsl conf/log4j.properties /conf/

	cat << EOF > zookeeper/conf/zoo.cfg
tickTime=2000
dataDir=/tmp/zookeeper/
clientPort=2181
clientPortAddress=$MESOS_IP
initLimit=5
syncLimit=2
EOF

	INDEX=1
	for SERVER in $MASTERS; do
		echo "server.$INDEX=$SERVER:2888:3888" >> zookeeper/conf/zoo.cfg
		INDEX=$((INDEX + 1))
	done
	echo "zookeeper ready."
}

function make_disk_resources() {

    RUN_ID=$RANDOM
    TMP_SCRIPT_PY=${RUN_ID}.py
    TMP_CONFIG=${RUN_ID}.cfg

    cat << EOF > $TMP_SCRIPT_PY
#!python3

import json
import os
import re
import shutil
import subprocess
import sys

from datetime import datetime
from itertools import chain
from math import floor
from string import Template


PROG = os.path.basename(__file__)

JSON_COMMON_TEMPLATE = Template('''
{
    "name": "disk",
    "role": "\$role",
    "scalar": {
        "value": \$free_space
    },
    "type": "SCALAR"
}
''')

JSON_DISK_TEMPLATE = Template('''
{
    "disk": {
        "source": {
            "type": "MOUNT",
            "mount": {
                "root": "\$mp"
            }
        }
    }
}
''')

MOUNT_PATTERN = re.compile('on\s+(/mnt/local-\d+.\d+)\s+', re.M | re.I)

# Conversion factor for Bytes -> MB calculation
MB = float(1 << 20)

TOLERANCE_MB = 100

RESOURCES_TEMPLATE_HEADER = '''# Generated by {prog} on {dt}
#
'''

RESOURCES_TEMPLATE = '''
MESOS_RESOURCES='{res}'
'''


class VolumeDiscoveryException(Exception):
    pass


def find_mounts_matching(pattern):
    '''
    find all matching mounts from the output of the mount command
    '''
    print('Looking for mounts matching pattern "{}"'.format(pattern.pattern))
    mounts = subprocess.check_output(['mount'], universal_newlines=True)
    return pattern.findall(mounts)


def make_disk_resources_json(mounts, role):
    '''
    Disk resources are defined in https://mesos.apache.org/documentation/latest/multiple-disk/

    Substitute discovered mounts into JSON_TEMPLATE, returning a list of Mounts

    @type mounts: tuple(mount_point, free_space_in_mb)
    @rtype: list
    '''
    for (mp, fs) in mounts:
        common = JSON_COMMON_TEMPLATE.substitute(free_space=fs, role=role)
        disk = JSON_DISK_TEMPLATE.substitute(mp=mp)
        yield json.loads(common), json.loads(disk)


def get_disk_free(path):
    '''
    @type path: str

    @rtype tuple
    '''
    return (path, floor(float(shutil.disk_usage(path).free) / MB))


def get_mounts_and_freespace(matching_mounts):
    for mount, free_space in map(get_disk_free, matching_mounts):
        net_free_space = free_space - TOLERANCE_MB
        if net_free_space <= 0:
            # Per @cmaloney and @lingmann, we should hard exit here if volume
            # doesn't have sufficient space.
            raise VolumeDiscoveryException(
                '{} has {} MB net free space, expected > 100M'.format(mount, net_free_space)
            )
        yield (mount, net_free_space)


def _handle_root_volume(root_volume, role):
    os.makedirs(root_volume, exist_ok=True)
    for common, _ in make_disk_resources_json(get_mounts_and_freespace([root_volume]), role):
        yield common, {}


def stitch(parts):
    common, disk = parts
    common.update(disk)
    return common


def main(output_env_file):
    '''
    Find mounts and freespace matching MOUNT_PATTERN, create RESOURCES for the
    disks, and merge the list of disk resources with optionally existing
    MESOS_RESOURCES environment varianble.

    @type output_env_file: str, filename to write resources
    '''
    if os.path.exists(output_env_file):
        print('Voume discovery assumed to be completed because {} exists'.format(output_env_file))
        return

    mounts_dfree = list(get_mounts_and_freespace(find_mounts_matching(MOUNT_PATTERN)))
    print('Found matching mounts : {}'.format(mounts_dfree))

    role = os.getenv('MESOS_DEFAULT_ROLE', '*')

    disk_resources = list(
        map(
            stitch, chain(
                make_disk_resources_json(mounts_dfree, role),
                _handle_root_volume(os.environ['MESOS_WORK_DIR'], role)
            )
        )
    )
    print('Generated disk resources map: {}'.format(disk_resources))

    # write contents to a temporary file
    tmp_file = '{}.tmp'.format(output_env_file)
    with open(tmp_file, 'w') as env_file:
        env_file.write(RESOURCES_TEMPLATE_HEADER.format(prog=PROG, dt=datetime.now()))
        if disk_resources:
            msg = 'Creating updated environment artifact file : {}'
            env_resources = os.environ.get('MESOS_RESOURCES', '[]')
            try:
                resources = json.loads(env_resources)
            except ValueError as e:
                print('ERROR: Invalid MESOS_RESOURCES JSON {} --- {}'.format(e, env_resources), file=sys.stderr)
                sys.exit(1)
            resources.extend(disk_resources)
            env_file.write(RESOURCES_TEMPLATE.format(res=json.dumps(resources)))
        else:
            msg = 'No additional volumes. Empty artifact file {} created'

    print(msg.format(output_env_file))

    # Now rename tmp file to final file. This guarantees that anything reading
    # this file never sees a "partial" version of the file. It either doesn't
    # exist or it is there with full contents.
    os.rename(tmp_file, output_env_file)


if __name__ == '__main__':
    try:
        main(sys.argv[1])
    except KeyError as e:
        print('ERROR: Missing key {}'.format(e), file=sys.stderr)
        sys.exit(1)
    except VolumeDiscoveryException as e:
        print('ERROR: {}'.format(e), file=sys.stderr)
        sys.exit(1)

EOF

    echo -n "Generating resources.json ... "
    MNT=`test -e /mnt && echo /mnt || (mkdir -p mnt && echo mnt)`
    docker run --rm -v $MNT:/mnt -e "MESOS_WORK_DIR=`pwd`" -v "`pwd`:`pwd`" -w "`pwd`" python:3-alpine python $TMP_SCRIPT_PY $TMP_CONFIG
    . $TMP_CONFIG
    echo $MESOS_RESOURCES | json_pp > resources.json

    # Cleanup
    rm -f $TMP_CONFIG $TMP_SCRIPT_PY
    echo "done"

cat << EOF > stop
    #!/bin/bash
    docker-compose kill -s SIGUSR1 mesosslave
EOF
    chmod +x stop
}

if [ "_$1" = "_master" ]; then
	mesos_master
elif [ "_$1" = "_slave" ]; then
	mesos_slave
else
	echo "usage: $0 <master|slave>"
fi

